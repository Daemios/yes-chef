// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Define models for our cooking application
model Recipe {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  ingredientsText String @db.Text  // Store as JSON string to be parsed in application
  instructions String @db.Text
  prepTime    Int?     // Preparation time in minutes
  cookTime    Int?     // Cooking time in minutes
  servings    Int?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])
  tags        TagsOnRecipes[]
  ingredients Ingredient[]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipes   Recipe[]
}

model Tag {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  recipes TagsOnRecipes[]
}

model TagsOnRecipes {
  recipe    Recipe  @relation(fields: [recipeId], references: [id])
  recipeId  Int
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     Int
  assignedAt DateTime @default(now())

  @@id([recipeId, tagId])
}

model Ingredient {
  id         Int       @id @default(autoincrement())
  name       String
  amount     String?   // Amount like "2 cups" or "300g"
  recipeId   Int
  recipe     Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
